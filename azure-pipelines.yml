trigger:
  branches:
    include:
    - master
    - 0.4.0
  tags:
    include:
    - '*'
  paths:
    include:
      - '*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

variables:
  OCTOBOT_REPOSITORY: https://github.com/Drakkar-Software/OctoBot.git
  OCTOBOT_BRANCH: 0.4.0
  OCTOBOT_REPOSITORY_DIR: OctoBot
  NLTK_DATA: nltk_data

jobs:
- job: Windows
  pool:
    vmImage: 'windows-latest'
  strategy:
    maxParallel: 2
    matrix:
        Python37-32bit-full:
          PYTHON_VERSION: '3.7'
          PYTHON_ARCH: 'x86'
        Python37-64bit-full:
          PYTHON_VERSION: '3.7'
          PYTHON_ARCH: 'x64'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      addToPath: true
      architecture: $(PYTHON_ARCH)
  - powershell: |
      git clone -q $env:OCTOBOT_REPOSITORY -b $env:OCTOBOT_BRANCH $env:OCTOBOT_REPOSITORY_DIR
    displayName: 'Install OctoBot environment'
  - powershell: |
      Copy-Item bin $env:OCTOBOT_REPOSITORY_DIR -recurse
    displayName: 'Prepare pyinstaller data'
  - powershell: |
      cd $env:OCTOBOT_REPOSITORY_DIR
    displayName: 'Fetch nltk data'
  - powershell: |
      cd $env:OCTOBOT_REPOSITORY_DIR
    displayName: 'Compile OctoBot'
  - powershell: |
      cd $env:OCTOBOT_REPOSITORY_DIR
    displayName: 'Produce binary'
  - powershell: |
      cd $env:OCTOBOT_REPOSITORY_DIR
      mkdir dist
      "plop" | Out-File -FilePath dist/OctoBot_windows.exe
      Get-FileHash dist/OctoBot_windows.exe
      Copy-Item dist/OctoBot_windows.exe $env:BUILD_ARTIFACTSTAGINGDIRECTORY/OctoBot_windows_$env:PYTHON_ARCH.exe
    displayName: 'Generate checksum'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'OctoBot_windows_$(PYTHON_ARCH)'

- job: macOS
  pool:
    vmImage: 'macOS-latest'
  strategy:
    maxParallel: 2
    matrix:
        Python37-64bit-full:
          PYTHON_VERSION: '3.7'
          PYTHON_ARCH: 'x64'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      addToPath: true
      architecture: $(PYTHON_ARCH)
  - script: |
      git clone -q $OCTOBOT_REPOSITORY -b $OCTOBOT_BRANCH $OCTOBOT_REPOSITORY_DIR
    displayName: 'Install OctoBot environment'
  - script: |
      cp -R bin $OCTOBOT_REPOSITORY_DIR
    displayName: 'Prepare pyinstaller data'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
    displayName: 'Fetch nltk data'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
    displayName: 'Compile OctoBot'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
    displayName: 'Produce binary'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
      mkdir dist
      echo "plop" > dist/OctoBot_macos
      RELEASE_SHASUM=$(openssl sha1 ./dist/OctoBot_macos)
      cp dist/OctoBot_macos $(Build.ArtifactStagingDirectory)/
      ls $(Build.ArtifactStagingDirectory)/
      echo "Checksum: $RELEASE_SHASUM"
      echo "##vso[task.setvariable variable=RELEASE_SHASUM]$RELEASE_SHASUM"
    displayName: 'Generate checksum'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'OctoBot_macos'

- job: Publish_release
  dependsOn:
    - Windows
    - macOS
#  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        path: $(Build.ArtifactStagingDirectory)
      displayName: 'Fetch artifacts'
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        MACOS_RELEASE_SHASUM=$(openssl sha1 ./OctoBot_macos/OctoBot_macos)
        sha_list=($MACOS_RELEASE_SHASUM)
        MACOS_RELEASE_SHASUM=${sha_list[1]}
        echo "MACOS_RELEASE_SHASUM: $MACOS_RELEASE_SHASUM"
        WX86_RELEASE_SHASUM=$(openssl sha1 ./OctoBot_windows_x86/OctoBot_windows_x86.exe)
        sha_list=($WX86_RELEASE_SHASUM)
        WX86_RELEASE_SHASUM=${sha_list[1]}
        echo "WX86_RELEASE_SHASUM: $WX86_RELEASE_SHASUM"
        WX64_RELEASE_SHASUM=$(openssl sha1 ./OctoBot_windows_x64/OctoBot_windows_x64.exe)
        sha_list=($WX64_RELEASE_SHASUM)
        WX64_RELEASE_SHASUM=${sha_list[1]}
        echo "WX64_RELEASE_SHASUM: $WX64_RELEASE_SHASUM"
        SHA_TABLE="| Binary   |      SHA1\n|----------|:-------------:|\n| OctoBot_linux | https://travis-ci.com/github/Drakkar-Software/OctoBot-Binary |\n| OctoBot_windows_x64.exe | $WX64_RELEASE_SHASUM |\n| OctoBot_windows_x86.exe | $WX86_RELEASE_SHASUM |\n| OctoBot_macos | $MACOS_RELEASE_SHASUM |"
        echo -e "SHA table:\n$SHA_TABLE"
        echo "##vso[task.setvariable variable=SHA_TABLE]$SHA_TABLE"
      displayName: 'Generate checksums'
    - script: |
        tags=$(git tag --sort=-creatordate)
        tags_list=($tags)
        tag=${tags_list[0]}
        echo "Tag: $tag"
        echo -e "SHA table:\n$SHA_TABLE"
        echo -e $SHA_TABLE > $(Build.ArtifactStagingDirectory)/release_notes.txt
        echo "##vso[task.setvariable variable=TAG]$tag"

      displayName: 'Prepare variables'
    - task: GitHubRelease@0
      condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
      displayName: 'Publish release'
      inputs:
        gitHubConnection: drakkar_software
        repositoryName: '$(Build.Repository.Name)'
        action: 'edit'
        title: 'Release - $(TAG)'
        tag: '$(TAG)'
        releaseNotesFile: '$(Build.ArtifactStagingDirectory)/release_notes.txt'
        addChangeLog: false
        assetUploadMode: 'replace'
        assets: |
          $(Build.ArtifactStagingDirectory)/OctoBot_macos/*
          $(Build.ArtifactStagingDirectory)/OctoBot_windows_x86/*
          $(Build.ArtifactStagingDirectory)/OctoBot_windows_x64/*
