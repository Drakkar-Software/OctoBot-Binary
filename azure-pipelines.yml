trigger:
  branches:
    include:
    - master
  tags:
    include:
    - '*'
  paths:
    include:
      - '*'

pr:
  autoCancel: true
  branches:
    include:
    - '*'

variables:
  OCTOBOT_REPOSITORY: https://github.com/Drakkar-Software/OctoBot.git
  OCTOBOT_BRANCH: dev
  OCTOBOT_REPOSITORY_DIR: OctoBot
  NLTK_DATA: nltk_data

jobs:
- job: Windows
  pool:
    vmImage: 'windows-latest'
  strategy:
    maxParallel: 2
    matrix:
        Python38-32bit-full:
          PYTHON_VERSION: '3.8'
          PYTHON_ARCH: 'x86'
        Python38-64bit-full:
          PYTHON_VERSION: '3.8'
          PYTHON_ARCH: 'x64'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      addToPath: true
      architecture: $(PYTHON_ARCH)
  - powershell: |
      git clone -q $env:OCTOBOT_REPOSITORY -b $env:OCTOBOT_BRANCH $env:OCTOBOT_REPOSITORY_DIR
    displayName: 'Install OctoBot environment'
  - script: |
      python -m pip install --upgrade pip setuptools wheel
      python -m pip install --prefer-binary -r requirements.txt
      python -m pip install --prefer-binary -r "%OCTOBOT_REPOSITORY_DIR%/requirements.txt"
      python -m pip freeze
    displayName: 'Install dependencies'
  - powershell: |
      python scripts/python_file_lister.py bin/octobot_packages_files.txt $env:OCTOBOT_REPOSITORY_DIR
      python scripts/insert_imports.py "$env:OCTOBOT_REPOSITORY_DIR/octobot/cli.py"
      Copy-Item bin $env:OCTOBOT_REPOSITORY_DIR -recurse
    displayName: 'Prepare pyinstaller data'
  - powershell: |
      cd $env:OCTOBOT_REPOSITORY_DIR
      python ../scripts/fetch_nltk_data.py words $env:NLTK_DATA
    displayName: 'Fetch nltk data'
  - script: |
      cd %OCTOBOT_REPOSITORY_DIR%
      python setup.py build_ext --inplace
    displayName: 'Compile OctoBot'
  - script: |
      cd %OCTOBOT_REPOSITORY_DIR%
      python -m PyInstaller ./bin/start.spec --log-level=INFO --clean
    displayName: 'Produce binary'
  - powershell: |
      cd $env:OCTOBOT_REPOSITORY_DIR
      Rename-Item dist/OctoBot.exe OctoBot_windows.exe
      ls dist
      Get-FileHash dist/OctoBot_windows.exe
      Copy-Item dist/OctoBot_windows.exe $env:BUILD_ARTIFACTSTAGINGDIRECTORY/OctoBot_windows_$env:PYTHON_ARCH.exe
      dist/OctoBot_windows.exe --version
    displayName: 'Generate checksum'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'OctoBot_windows_$(PYTHON_ARCH)'

- job: macOS
  pool:
    vmImage: 'macOS-latest'
  strategy:
    maxParallel: 2
    matrix:
        Python38-64bit-full:
          PYTHON_VERSION: '3.8'
          PYTHON_ARCH: 'x64'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      addToPath: true
      architecture: $(PYTHON_ARCH)
  - script: |
      git clone -q $OCTOBOT_REPOSITORY -b $OCTOBOT_BRANCH $OCTOBOT_REPOSITORY_DIR
    displayName: 'Install OctoBot environment'
  - script: |
      python -m pip install --upgrade pip setuptools wheel
      python -m pip install --prefer-binary -r requirements.txt
      python -m pip install -r $OCTOBOT_REPOSITORY_DIR/requirements.txt
      python -m pip freeze
    displayName: 'Install dependencies'
  - script: |
      python scripts/python_file_lister.py bin/octobot_packages_files.txt $OCTOBOT_REPOSITORY_DIR
      python scripts/insert_imports.py $OCTOBOT_REPOSITORY_DIR/octobot/cli.py
      cp -R bin $OCTOBOT_REPOSITORY_DIR
    displayName: 'Prepare pyinstaller data'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
      python ../scripts/fetch_nltk_data.py words $NLTK_DATA
    displayName: 'Fetch nltk data'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
      python setup.py build_ext --inplace
    displayName: 'Compile OctoBot'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
      python -m PyInstaller ./bin/start.spec --log-level=INFO --clean
    displayName: 'Produce binary'
  - script: |
      cd $OCTOBOT_REPOSITORY_DIR
      mv dist/OctoBot dist/OctoBot_macos
      ls -al dist
      RELEASE_SHASUM=$(openssl sha1 ./dist/OctoBot_macos)
      echo "Checksum: $RELEASE_SHASUM"
      cp dist/OctoBot_macos $(Build.ArtifactStagingDirectory)/OctoBot_macos_$PYTHON_ARCH
      dist/OctoBot_macos --version
    displayName: 'Generate checksum'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'OctoBot_macos_$(PYTHON_ARCH)'

- job: Release
  dependsOn:
    - Windows
    - macOS
  steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        path: $(Build.ArtifactStagingDirectory)
      displayName: 'Fetch artifacts'
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        MACOSX64_RELEASE_SHASUM=$(openssl sha1 ./OctoBot_macos_x64/OctoBot_macos_x64)
        sha_list=($MACOSX64_RELEASE_SHASUM)
        MACOSX64_RELEASE_SHASUM=${sha_list[1]}
        echo "MACOSX64_RELEASE_SHASUM: $MACOSX64_RELEASE_SHASUM"
        WX86_RELEASE_SHASUM=$(openssl sha1 ./OctoBot_windows_x86/OctoBot_windows_x86.exe)
        sha_list=($WX86_RELEASE_SHASUM)
        WX86_RELEASE_SHASUM=${sha_list[1]}
        echo "WX86_RELEASE_SHASUM: $WX86_RELEASE_SHASUM"
        WX64_RELEASE_SHASUM=$(openssl sha1 ./OctoBot_windows_x64/OctoBot_windows_x64.exe)
        sha_list=($WX64_RELEASE_SHASUM)
        WX64_RELEASE_SHASUM=${sha_list[1]}
        echo "WX64_RELEASE_SHASUM: $WX64_RELEASE_SHASUM"
        SHA_TABLE="| Binary   |      SHA1\n|----------|:-------------:|\n| OctoBot_linux | https://travis-ci.com/github/Drakkar-Software/OctoBot-Binary |\n| OctoBot_windows_x64.exe | $WX64_RELEASE_SHASUM |\n| OctoBot_windows_x86.exe | $WX86_RELEASE_SHASUM |\n| OctoBot_macos_x64 | $MACOSX64_RELEASE_SHASUM |"
        echo -e "SHA table:\n$SHA_TABLE"
        echo "##vso[task.setvariable variable=SHA_TABLE]$SHA_TABLE"
      displayName: 'Generate checksums'
    - script: |
        tags=$(git tag --sort=-creatordate)
        tags_list=($tags)
        tag=${tags_list[0]}
        echo "Tag: $tag"
        echo -e "SHA table:\n$SHA_TABLE"
        echo -e $SHA_TABLE > $(Build.ArtifactStagingDirectory)/release_notes.txt
        echo "##vso[task.setvariable variable=TAG]$tag"
      displayName: 'Prepare release data'
    - task: GitHubRelease@0
      condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
      displayName: 'Publish release'
      inputs:
        gitHubConnection: drakkar_software
        repositoryName: '$(Build.Repository.Name)'
        action: 'edit'
        title: 'Release - $(TAG)'
        tag: '$(TAG)'
        releaseNotesFile: '$(Build.ArtifactStagingDirectory)/release_notes.txt'
        addChangeLog: false
        assetUploadMode: 'replace'
        assets: |
          $(Build.ArtifactStagingDirectory)/OctoBot_macos_x64/*
          $(Build.ArtifactStagingDirectory)/OctoBot_windows_x86/*
          $(Build.ArtifactStagingDirectory)/OctoBot_windows_x64/*
