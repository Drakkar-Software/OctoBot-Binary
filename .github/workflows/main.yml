name: OctoBot-Binary-CI
on: push

jobs:
  builds:
    name: ${{ matrix.os }}${{ matrix.arch }} - Python 3.8 - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        arch: [ x64 ]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'
        architecture: ${{ matrix.arch }}

    - name: Build OctoBot Binary on Unix
      if: matrix.os != 'windows-latest'
      env:
        GH_REPO: Drakkar-Software/OctoBot-Tentacles
        OCTOBOT_GH_REPO: https://github.com/Drakkar-Software/OctoBot.git
        OCTOBOT_DEFAULT_BRANCH: dev
        OCTOBOT_REPOSITORY_DIR: OctoBot
        NLTK_DATA: nltk_data
      run: |
        pip install -U pip setuptools wheel
        pip install -r requirements.txt
        git clone -q $OCTOBOT_GH_REPO -b $OCTOBOT_DEFAULT_BRANCH
        pip install --prefer-binary -r $OCTOBOT_REPOSITORY_DIR/dev_requirements.txt -r $OCTOBOT_REPOSITORY_DIR/requirements.txt
        python scripts/python_file_lister.py bin/octobot_packages_files.txt $OCTOBOT_REPOSITORY_DIR
        python scripts/insert_imports.py $OCTOBOT_REPOSITORY_DIR/octobot/cli.py
        cp -R bin $OCTOBOT_REPOSITORY_DIR
        cd $OCTOBOT_REPOSITORY_DIR
        python ../scripts/fetch_nltk_data.py words $NLTK_DATA
        python setup.py build_ext --inplace
        python -m PyInstaller bin/start.spec
        mv dist/OctoBot ./OctoBot_${{ matrix.os }}_${{ matrix.arch }} && rm -rf dist/
        ./OctoBot_${{ matrix.os }}_${{ matrix.arch }} --version

    - name: Build OctoBot Binary on Windows
      if: matrix.os == 'windows-latest'
      env:
        GH_REPO: Drakkar-Software/OctoBot-Tentacles
        OCTOBOT_GH_REPO: https://github.com/Drakkar-Software/OctoBot.git
        OCTOBOT_DEFAULT_BRANCH: dev
        OCTOBOT_REPOSITORY_DIR: OctoBot
        NLTK_DATA: nltk_data
      run: |
        pip install -U pip setuptools wheel
        pip install -r requirements.txt
        git clone -q $env:OCTOBOT_GH_REPO -b $env:OCTOBOT_DEFAULT_BRANCH
        pip install --prefer-binary -r $env:OCTOBOT_REPOSITORY_DIR/dev_requirements.txt -r $env:OCTOBOT_REPOSITORY_DIR/requirements.txt
        python scripts/python_file_lister.py bin/octobot_packages_files.txt $env:OCTOBOT_REPOSITORY_DIR
        python scripts/insert_imports.py $env:OCTOBOT_REPOSITORY_DIR/octobot/cli.py
        Copy-Item bin $env:OCTOBOT_REPOSITORY_DIR -recurse
        cd $env:OCTOBOT_REPOSITORY_DIR
        python ../scripts/fetch_nltk_data.py words $NLTK_DATA
        python setup.py build_ext --inplace
        python -m PyInstaller bin/start.spec
        Rename-Item dist/OctoBot.exe OctoBot_windows.exe
        Copy-Item dist/OctoBot_windows.exe OctoBot_windows.exe
        dist/OctoBot_windows.exe --version

    - uses: actions/upload-artifact@v2
      if: matrix.os != 'windows-latest'
      with:
        name: OctoBot_${{ matrix.os }}_${{ matrix.arch }}
        path: OctoBot/OctoBot_${{ matrix.os }}_${{ matrix.arch }}
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-latest'
      with:
        name: OctoBot_windows_${{ matrix.arch }}
        path: OctoBot/dist/OctoBot_windows.exe
        if-no-files-found: error

  create-release:
    name: Create Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: builds
    runs-on: ubuntu-latest
    outputs:
      release-url-output: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Set version as environement var
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Download Windows x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_windows_x64
          path: OctoBot_windows_x64.exe

      - name: Download Linux x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_ubuntu-latest_x64
          path: OctoBot_linux_x64

      - name: Download MacOs x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_macos-latest_x64
          path: OctoBot_macos_x64

      - name: Compute hashes
        id: hashes
        run: |
          echo ::set-output name=octobot_linux_x64_hash::$(openssl sha256 OctoBot_linux_x64/OctoBot_ubuntu-latest_x64 | awk '{print $2}')
          echo ::set-output name=octobot_macos_x64_hash::$(openssl sha256 OctoBot_macos_x64/OctoBot_macos-latest_x64 | awk '{print $2}')
          echo ::set-output name=octobot_windows_x64_hash::$(openssl sha256 OctoBot_windows_x64.exe/OctoBot_windows.exe | awk '{print $2}')

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: Release - ${{ steps.vars.outputs.tag }}
          draft: false
          prerelease: false
          body: |
            | Binary        | SHA256        |
            | ------------- |:-------------:|
            | OctoBot_windows_x64.exe | ${{ steps.hashes.outputs.octobot_windows_x64_hash }} |
            | OctoBot_linux_x64 | ${{ steps.hashes.outputs.octobot_linux_x64_hash }} |
            | OctoBot_macos_x64 | ${{ steps.hashes.outputs.octobot_macos_x64_hash }} |

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./OctoBot_windows_x64.exe/OctoBot_windows.exe
          asset_name: OctoBot_windows_x64.exe
          asset_content_type: application/x-binary

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OctoBot_linux_x64/OctoBot_ubuntu-latest_x64
          asset_name: OctoBot_linux_x64
          asset_content_type: application/x-binary

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OctoBot_macos_x64/OctoBot_macos-latest_x64
          asset_name: OctoBot_macos_x64
          asset_content_type: application/x-binary

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - builds
    if: ${{ failure() }}

    steps:
      - name: Notify discord
        uses: sarisia/actions-status-discord@v1
        with:
          status: Failure
          webhook: ${{ secrets.DISCORD_GITHUB_WEBHOOK }}
