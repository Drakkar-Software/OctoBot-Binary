name: OctoBot-Binary-CI
on: push

jobs:
  builds:
    name: ${{ matrix.os }} - ${{ matrix.arch }} - Python 3.8 - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        arch: [ x64, arm64 ]
        exclude:
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: arm64

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8.x'
        architecture: x64

    - name: Build OctoBot Binary on Linux arm64
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
      uses: uraimo/run-on-arch-action@v2.0.5
      with:
        arch: aarch64
        distro: ubuntu20.04
        githubToken: ${{ github.token }}
        env: |
          GH_REPO: Drakkar-Software/OctoBot-Tentacles
          OCTOBOT_GH_REPO: https://github.com/Drakkar-Software/OctoBot.git
          OCTOBOT_DEFAULT_BRANCH: dev
          OCTOBOT_REPOSITORY_DIR: OctoBot
          NLTK_DATA: nltk_data
          BUILD_ARCH: ${{ matrix.arch }}
        run: |
          apt-get update
          apt-get install -y --no-install-recommends python3.8 python3-pip python3-dev git gcc musl-dev libc-dev build-essential zlib1g zlib1g-dev
          bash ./build_scripts/unix.sh

    - name: Build OctoBot Binary on Linux
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
      env:
        GH_REPO: Drakkar-Software/OctoBot-Tentacles
        OCTOBOT_GH_REPO: https://github.com/Drakkar-Software/OctoBot.git
        OCTOBOT_DEFAULT_BRANCH: dev
        OCTOBOT_REPOSITORY_DIR: OctoBot
        NLTK_DATA: nltk_data
        BUILD_ARCH: ${{ matrix.arch }}
      run: bash ./build_scripts/unix.sh

    - name: Build OctoBot Binary on MacOS
      if: matrix.os == 'macos-latest'
      env:
        GH_REPO: Drakkar-Software/OctoBot-Tentacles
        OCTOBOT_GH_REPO: https://github.com/Drakkar-Software/OctoBot.git
        OCTOBOT_DEFAULT_BRANCH: dev
        OCTOBOT_REPOSITORY_DIR: OctoBot
        NLTK_DATA: nltk_data
        BUILD_ARCH: ${{ matrix.arch }}
      run: bash ./build_scripts/unix.sh

    - name: Build OctoBot Binary on Windows
      if: matrix.os == 'windows-latest'
      env:
        GH_REPO: Drakkar-Software/OctoBot-Tentacles
        OCTOBOT_GH_REPO: https://github.com/Drakkar-Software/OctoBot.git
        OCTOBOT_DEFAULT_BRANCH: dev
        OCTOBOT_REPOSITORY_DIR: OctoBot
        NLTK_DATA: nltk_data
      run: .\build_scripts\windows.ps1
      shell: powershell

    - uses: actions/upload-artifact@v2
      if: matrix.os != 'windows-latest'
      with:
        name: OctoBot_${{ matrix.os }}_${{ matrix.arch }}
        path: OctoBot/OctoBot_${{ matrix.arch }}
        if-no-files-found: error

    - uses: actions/upload-artifact@v2
      if: matrix.os == 'windows-latest'
      with:
        name: OctoBot_windows_${{ matrix.arch }}
        path: OctoBot/dist/OctoBot_windows.exe
        if-no-files-found: error

  test:
    name: ${{ matrix.os }}${{ matrix.arch }} - Python 3.8 - test
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        arch: [ x64 ]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.x'
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: pip install -r dev_requirements.txt -r requirements.txt

      - name: Download Windows x64 artifact
        if: matrix.os == 'windows-latest'
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_windows_x64
          path: OctoBot_windows_x64.exe

      - name: Test OctoBot Binary on Windows
        if: matrix.os == 'windows-latest'
        run: |
          pytest tests

      - name: Download Linux x64 artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_ubuntu-latest_x64
          path: OctoBot_linux_x64

      - name: Test OctoBot Binary on Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x OctoBot_linux_x64/OctoBot_ubuntu-latest_x64
          pytest tests

      - name: Download MacOs x64 artifact
        if: matrix.os == 'macos-latest'
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_macos-latest_x64
          path: OctoBot_macos_x64

      - name: Test OctoBot Binary on MacOs
        if: matrix.os == 'macos-latest'
        run: |
          chmod +x OctoBot_macos_x64/OctoBot_macos-latest_x64
          pytest tests

  create-release:
    name: Create Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs:
      - build
      - test
    runs-on: ubuntu-latest
    outputs:
      release-url-output: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Set version as environement var
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Download Windows x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_windows_x64
          path: OctoBot_windows_x64.exe

      - name: Download Linux x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_ubuntu-latest_x64
          path: OctoBot_linux_x64

      - name: Download Linux arm64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_ubuntu-latest_arm64
          path: OctoBot_linux_arm64

      - name: Download MacOs x64 artifact
        uses: actions/download-artifact@v2
        with:
          name: OctoBot_macos-latest_x64
          path: OctoBot_macos_x64

      - name: Compute hashes
        id: hashes
        run: |
          echo ::set-output name=octobot_linux_x64_hash::$(openssl sha256 OctoBot_linux_x64/OctoBot_x64 | awk '{print $2}')
          echo ::set-output name=octobot_linux_arm64_hash::$(openssl sha256 OctoBot_linux_arm64/OctoBot_arm64 | awk '{print $2}')
          echo ::set-output name=octobot_macos_x64_hash::$(openssl sha256 OctoBot_macos_x64/OctoBot_x64 | awk '{print $2}')
          echo ::set-output name=octobot_windows_x64_hash::$(openssl sha256 OctoBot_windows_x64.exe/OctoBot_windows.exe | awk '{print $2}')

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          release_name: Release - ${{ steps.vars.outputs.tag }}
          owner: ${{ github.repository_owner }}
          repo: OctoBot
          draft: false
          prerelease: false
          commitish: master
          body: |
            | Binary        | SHA256        |
            | ------------- |:-------------:|
            | OctoBot_windows_x64.exe | ${{ steps.hashes.outputs.octobot_windows_x64_hash }} |
            | OctoBot_linux_x64 | ${{ steps.hashes.outputs.octobot_linux_x64_hash }} |
            | OctoBot_linux_arm64 | ${{ steps.hashes.outputs.octobot_linux_arm64_hash }} |
            | OctoBot_macos_x64 | ${{ steps.hashes.outputs.octobot_macos_x64_hash }} |

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./OctoBot_windows_x64.exe/OctoBot_windows.exe
          asset_name: OctoBot_windows_x64.exe
          asset_content_type: application/x-binary

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OctoBot_linux_x64/OctoBot_x64
          asset_name: OctoBot_linux_x64
          asset_content_type: application/x-binary

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OctoBot_linux_arm64/OctoBot_arm64
          asset_name: OctoBot_linux_arm64
          asset_content_type: application/x-binary

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: OctoBot_macos_x64/OctoBot_x64
          asset_name: OctoBot_macos_x64
          asset_content_type: application/x-binary

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: ${{ failure() }}

    steps:
      - name: Notify discord
        uses: sarisia/actions-status-discord@v1
        with:
          status: Failure
          webhook: ${{ secrets.DISCORD_GITHUB_WEBHOOK }}
